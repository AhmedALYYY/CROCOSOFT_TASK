@app.route('/customers', methods=['POST'])
def add_customer():
    cursor = None
    try:
        # validate the received values
        if request.method == 'POST':
            _fname = request.form.get('first_name')
            _lname = request.form.get('last_name')
            _email = request.form.get('email')
            _phone = request.form.get('phone_number')
            if _fname and _email and _phone and _lname:

                message = {
                    'status': 200,
                    'message': 'Customer added successfully',
                }
                resp = jsonify(message)
                resp.status_code = 200
                return resp
            else:
                abort(400)
        else:
            abort(404)
    finally:
        if cursor:
            cursor.close()


@app.route('/customers/<int:id>', methods=['GET', 'PUT', 'DELETE'])
def updateCustomer(id):
    cursor = None
    try:
        if request.method == 'GET':
            cursor = mysql.connection.cursor()
            cursor.execute("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=%s", str(id))
            row = cursor.fetchone()
            if row:
                message = {
                    'status': 200,
                    'data': row,
                }
                resp = jsonify(message)
                resp.status_code = 200
                return resp
            else:
                message = {
                    'status': 400,
                    'message': 'Customer Not Found',
                }
                resp = jsonify(message)
                resp.status_code = 400
                return resp
        elif request.method == 'DELETE':
            cursor = mysql.connection.cursor()
            cursor.execute("DELETE FROM CUSTOMER WHERE CUSTOMER_ID=%s", (str(id),))
            mysql.connection.commit()
            deleted_row_count = cursor.rowcount
            if deleted_row_count > 0:
                message = {
                    'status': 200,
                    'message': "Customer deleted successfully",
                }
                resp = jsonify(message)
                resp.status_code = 200
                return resp
            else:
                message = {
                    'status': 400,
                    'message': 'Customer Not Found',
                }
                resp = jsonify(message)
                resp.status_code = 400
                return resp
        elif request.method == 'PUT':
            _fname = request.form.get('first_name')
            _lname = request.form.get('last_name')
            _email = request.form.get('email')
            _phone = request.form.get('phone_number')
            if _fname and _email and _phone and _lname:
                sql = "UPDATE CUSTOMER SET FIRST_NAME=%s, LAST_NAME=%s, EMAIL_ADDRESS=%s, TELEPHONE_NUMBER=%s " \
                      "WHERE CUSTOMER_ID=%s"
                data = (_fname, _lname, _email, _phone, id)
                cursor = mysql.connection.cursor()
                cursor.execute(sql, data)
                mysql.connection.commit()
                updated_row_count = cursor.rowcount
                if updated_row_count > 0:
                    message = {
                        'status': 200,
                        'message': "Customer update successfully",
                    }
                    resp = jsonify(message)
                    resp.status_code = 200
                    return resp
                else:
                    message = {
                        'status': 400,
                        'message': 'Customer Not Found',
                    }
                    resp = jsonify(message)
                    resp.status_code = 400
                    return resp
            else:
                abort(400)
    finally:
        if cursor:
            cursor.close()



@app.errorhandler(404)
def not_found(error=None):
    message = {
        'status': 404,
        'message': 'Not Found: ' + request.url,
    }
    resp = jsonify(message)
    resp.status_code = 404
    return resp


@app.errorhandler(500)
def internal_error(error):
    message = {
        'status': 500,
        'message': 'Server error',
    }
    resp = jsonify(message)
    resp.status_code = 500
    return resp


@app.errorhandler(Exception)
def handle_exception(e):
    res = {'status': e.code,
           'message': e.message if hasattr(e, 'message') else f'{e}'}
    resp = jsonify(res)
    resp.status_code = e.code
    return resp




if __name__ == '__main__':
    app.run()
